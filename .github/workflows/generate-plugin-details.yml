name: Generate Plugin Details

on:
  push:
    branches:
      - main
    paths:
      - 'plugins.json'
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  generate-details:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Generate plugin details
        run: |
          node <<'EOL'
          const fs = require('fs');
          const https = require('https');

          async function main() {
            try {
              const plugins = JSON.parse(fs.readFileSync('plugins.json', 'utf8'));
              console.log(`在 plugins.json 中找到 ${plugins.length} 个插件`);

              // 跳过第一个插件
              const pluginsToProcess = plugins.slice(1);
              console.log(`准备处理 ${pluginsToProcess.length} 个插件（跳过第一个）`);

              const pluginDetails = [];
              const errors = [];

              for (const plugin of pluginsToProcess) {
                try {
                  console.log(`\n=== 正在获取插件清单：${plugin.id} ===`);
                  console.log(`仓库地址：${plugin.repositoryUrl}`);
                  const manifest = await fetchManifest(plugin.repositoryUrl);
                  
                  pluginDetails.push({
                    id: plugin.id,
                    manifest: manifest
                  });
                  
                  console.log(`✅ 成功处理插件：${plugin.id}`);
                } catch (error) {
                  const errorMsg = `插件 ${plugin.id} 处理失败：${error.message}`;
                  console.error(`❌ ${errorMsg}`);
                  errors.push(errorMsg);
                  // 继续处理其他插件，不中断整个流程
                }
              }

              // 写入 plugin_details.json 文件
              fs.writeFileSync('plugin_details.json', JSON.stringify(pluginDetails, null, 2));
              console.log(`\n✅ 生成 plugin_details.json 文件，包含 ${pluginDetails.length} 个插件`);

              // 报告错误统计
              if (errors.length > 0) {
                console.warn(`\n⚠️  处理过程中发现 ${errors.length} 个错误：`);
                errors.forEach((error, index) => {
                  console.warn(`${index + 1}. ${error}`);
                });
                console.warn(`\n成功率：${pluginDetails.length}/${pluginsToProcess.length} (${Math.round(pluginDetails.length / pluginsToProcess.length * 100)}%)`);
              } else {
                console.log(`\n🎉 所有插件处理成功！`);
              }

            } catch (error) {
              console.error(`❌ 处理失败：${error.message}`);
              process.exit(1);
            }
          }

          function fetchManifest(repoUrl) {
            // Try multiple common branch names
            const branches = ['main', 'master', 'dev', 'develop'];
            
            async function tryFetchFromBranch(branch) {
              const rawUrl = repoUrl.replace('github.com', 'raw.githubusercontent.com') + `/refs/heads/${branch}/_manifest.json`;
              console.log(`尝试从 ${branch} 分支获取清单文件：${rawUrl}`);
              
              return new Promise((resolve, reject) => {
                const timeout = setTimeout(() => {
                  reject(new Error(`获取清单文件超时（10秒）：${rawUrl}`));
                }, 10000);

                const req = https.get(rawUrl, res => {
                  clearTimeout(timeout);
                  
                  if (res.statusCode !== 200) {
                    return reject(new Error(`状态码：${res.statusCode}`));
                  }
                  
                  let data = '';
                  res.on('data', chunk => data += chunk);
                  res.on('end', () => {
                    try {
                      const manifest = JSON.parse(data);
                      resolve({ manifest, branch, url: rawUrl });
                    } catch (parseError) {
                      reject(new Error(`JSON 解析失败：${parseError.message}`));
                    }
                  });
                  res.on('error', err => {
                    clearTimeout(timeout);
                    reject(new Error(`读取响应数据时出错：${err.message}`));
                  });
                });

                req.on('error', err => {
                  clearTimeout(timeout);
                  reject(new Error(`网络错误：${err.message}`));
                });

                req.setTimeout(10000, () => {
                  req.destroy();
                  reject(new Error(`请求超时`));
                });
              });
            }

            // Try each branch until one succeeds
            return (async () => {
              const errors = [];
              
              for (const branch of branches) {
                try {
                  const result = await tryFetchFromBranch(branch);
                  console.log(`✅ 成功从 ${result.branch} 分支获取到清单文件`);
                  return result.manifest;
                } catch (error) {
                  errors.push(`${branch} 分支: ${error.message}`);
                  console.log(`❌ ${branch} 分支获取失败: ${error.message}`);
                }
              }
              
              // If all branches failed, throw a comprehensive error
              throw new Error(`无法从任何分支获取 _manifest.json 文件。尝试的分支：${branches.join(', ')}。错误详情：\n${errors.map((err, i) => `${i + 1}. ${err}`).join('\n')}。\n\n请检查：\n1. 文件名是否为 '_manifest.json'（注意下划线）\n2. 仓库是否为公开仓库\n3. 文件是否存在于上述分支中\n仓库地址：${repoUrl}`);
            })();
          }

          main();
          EOL

      - name: Commit and push plugin details
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add plugin_details.json
          if git diff --staged --quiet; then
            echo "没有变更需要提交"
          else
            git commit -m "自动生成 plugin_details.json"
            git push
            echo "✅ 已提交并推送 plugin_details.json 更新"
          fi
